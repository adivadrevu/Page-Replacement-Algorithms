#include<bits/stdc++.h>
using namespace std;

int LFU(int pages[], int n, int capacity)
{
            unordered_set<int> N;
            unordered_map<int, int> indexes;
            int page_faults = 0;
            for (int i=0; i<n; i++)
            {
                    if (N.size() < capacity)
                    {
                            if (N.find(pages[i])==N.end())
                            {
                                    N.insert(pages[i]);
                                    page_faults++;
                            }
                            indexes[pages[i]] = i;
                    }
                    else
                    {
                            if (N.find(pages[i]) == N.end())
                            {
                                    int lru = INT_MAX, val;
                                    for (auto it=N.begin(); it!=N.end(); it++)
                                    {
                                            if (indexes[*it] < lru)
                                            {
                                                    lru = indexes[*it];
                                                    val = *it;
                                            }
                                    }
                                    N.erase(val);
                                    N.insert(pages[i]);
                                    page_faults++;
                            }
                            indexes[pages[i]] = i;
                    }
            }
            return page_faults;
}

int main()
{
           int pages[] = {8, 0, 1, 3, 0, 4, 0, 5, 5, 3, 0, 6, 4};
                int n = sizeof(pages)/sizeof(pages[0]);
                    int capacity = 4;
                        cout << LFU(pages, n, capacity) << "\n";
                            return 0;
}

