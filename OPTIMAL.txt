#include <bits/stdc++.h>
using namespace std;
bool search(int key, vector<int>& fr)
{
            for (int i = 0; i < fr.size(); i++)
                            if (fr[i] == key)
                                                return true;
                return false;
}
int predict(int optimal[], vector<int>& fr, int pn, int index)
{
            int res = -1, farthest = index;
                for (int i = 0; i < fr.size(); i++) {
                                int j;
                                        for (j = index; j < pn; j++) {
                                                            if (fr[i] == optimal[j]) {
                                                                                    if (j > farthest) {
                                                                                                                farthest = j;
                                                                                                                                    res = i;
                                                                                                                                                    }
                                                                                                    break;
                                                                                                                }
                                                                    }
                                                if (j == pn)
                                                                    return i;
                                                    }
                    return (res == -1) ? 0 : res;
}

void optimalPage(int optimal[], int pn, int fn)
{
            vector<int> fr;
                int hit = 0;
                    for (int i = 0; i < pn; i++) {
                                    if (search(optimal[i], fr)) {
                                                        hit++;
                                                                    continue;
                                                                            }
                                            if (fr.size() < fn)
                                                                fr.push_back(optimal[i]);
                                                    else {
                                                                        int j = predict(optimal, fr, pn, i + 1);
                                                                                    fr[j] = optimal[i];
                                                                                            }
                                                        }
                        cout << "No. of hits = " << hit << endl;
                            cout << "No. of misses = " << pn - hit << endl;
}
int main()
{
            int optimal[] = { 7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2 };
                int pn = sizeof(optimal) / sizeof(optimal[0]);
                    int fn = 4;
                        optimalPage(optimal, pn, fn);
                            return 0;
}